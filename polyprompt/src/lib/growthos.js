// Generated by GrowthOS - Anti-vanity metrics SDK
import posthog from 'posthog-js';

// Rejected vanity metrics - we focus on business KPIs only
const VANITY_METRICS = [
  'page_view',
  'total_sessions',
  'bounce_rate',
  'time_on_site',
  'scroll_depth'
];

export const initGrowthOS = (apiKey = 'phc_Te80oSaTxThLruEeodFYH9uzlSR8vFkBrMzYPHX4WBz') => {
  posthog.init(apiKey, {
    api_host: 'https://eu.posthog.com',
    capture_pageview: false, // We control what gets tracked
    autocapture: false // No noise
  });

  // Auto-track critical business events only
  trackBusinessEvents();

  return {
    track: (event, properties) => {
      if (VANITY_METRICS.includes(event)) {
        console.warn(`GrowthOS: Rejected vanity metric "${event}"`);
        return;
      }
      posthog.capture(event, properties);
    },

    // A/B testing helper
    getVariant: (experimentKey) => {
      return posthog.getFeatureFlag(experimentKey);
    },

    // Referral tracking
    trackReferral: (code) => {
      posthog.capture('referral_click', { referral_code: code });
    }
  };
};

function trackBusinessEvents() {
  // Auto-track form submissions (signups)
  document.addEventListener('submit', (e) => {
    const form = e.target;
    if (form.action.includes('signup') || form.id.includes('signup')) {
      posthog.capture('signup_attempt');
    }
  });

  // Auto-track CTA clicks
  document.addEventListener('click', (e) => {
    const target = e.target;
    if (target.tagName === 'BUTTON' || target.classList.contains('cta')) {
      posthog.capture('cta_click', {
        text: target.textContent,
        position: target.getBoundingClientRect()
      });
    }
  });

  // Track page navigation (business-relevant only)
  let currentPath = window.location.pathname;
  const businessPages = ['/dashboard', '/pricing', '/checkout', '/onboarding'];

  if (businessPages.some(page => currentPath.includes(page))) {
    posthog.capture('page_view_business', { page: currentPath });
  }
}

// Export for manual tracking
export const growthos = {
  track: (event, properties) => posthog.capture(event, properties),
  identify: (userId, traits) => posthog.identify(userId, traits)
};